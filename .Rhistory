#AAAAAAAAAAAAAAAAAAHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH
install.packages('rjava')
#AAAAAAAAAAAAAAAAAAHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH
install.packages('rJava')
library(rjava)
library(rJava)
library(rJava)
.jaddClassPath("MFCI.jar")
.jinit('Processing.CorrelatedItemset')
#AAAAAAAAAAAAAAAAAAHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH
install.packages('rJava')
install.packages('purrr')
library(purrr)
library(rJava)
.jinit(".")
.jaddClassPath("MFCI.jar")
cs<- .jnew("processing.CorrelationSearch")
.jaddClassPath("MFCI.jar")
cs<- .jnew("processing.CorrelationSearch")
$cs$pcs
cs$pcs
cs$pcs$getTopKPairInformation
writeLines(get_pairs("0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300",FALSE,100,"Likelihood ratio","0.5","0.0",FALSE),"pair_output.txt")
writeLines(get_pairs("151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300",FALSE,100,"Likelihood ratio","0.5","0.0",FALSE),"pair_output.txt")
get_pairs<-function(itemset,including_absence,top_k,correlation_type,
continuity_correction,correlation_threshold,detail){
.jinit(".")
.jaddClassPath("MFCI.jar")
cs<- .jnew("processing.CorrelationSearch")
# t<-.jnew("java.lang.String", transaction_list_filepath)
#i<-.jnew("java.lang.String", items_list_filepath)
#pathname<-file(items_list_filepath,open="r");
#n<- length(readLines(pathname));
#closeAllConnections()
#r<-seq(0,n-1)
#ia<-.jnew("java.lang.Boolean", including_absence)
#ar<-.jarray(map(r,function(x) .jnew('java.lang.String',toString(x))),contents.class = "java/lang/String" )
#.jcall(cs,"V","initialData",i,t,ia)
search_type<-.jnew("java.lang.String","Token-ring Search")
use_detail<-.jnew("java.lang.Boolean", detail)
Integer <- J("java.lang.Integer")
topk<-.jnew("java/lang/Integer", as.integer(top_k))
cor<-.jnew("java.lang.String", correlation_type)
Double<- J("java.lang.Double")
cont<-Double$parseDouble(continuity_correction)
thresh<-Double$parseDouble(correlation_threshold)
itemset_ar<-.jarray(map(strsplit(itemset,","),function(x) .jnew('java.lang.String',toString(x))),contents.class = "java/lang/String" )
cs$pcs$getTopKPairInformation(itemset_ar,topk,search_type,cor,cont,thresh,use_detail)
}
writeLines(get_pairs("151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300",FALSE,100,"Likelihood ratio","0.5","0.0",FALSE),"pair_output.txt")
library(purrr)
library(rJava)
writeLines(get_pairs("151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300",FALSE,100,"Likelihood ratio","0.5","0.0",FALSE),"pair_output.txt")
writeLines(get_pairs("151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300",FALSE,100,"Likelihood ratio","0.5","0.0",FALSE),"pair_output.txt")
writeLines(get_pairs("151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300",FALSE,100,"Likelihood ratio","0.5","0.0",FALSE),"pair_output.txt")
library(purrr)
library(rJava)
get_mfci<-function(transaction_list_filepath,items_list_filepath,including_absence,top_k,correlation_type,
continuity_correction,correlation_threshold,singleton){
.jinit(".")
.jaddClassPath("MFCI.jar")
cs<- .jnew("processing.CorrelationSearch")
t<-.jnew("java.lang.String", transaction_list_filepath)
i<-.jnew("java.lang.String", items_list_filepath)
pathname<-file(items_list_filepath,open="r");
n<- length(readLines(pathname));
closeAllConnections()
r<-seq(0,n-1)
ia<-.jnew("java.lang.Boolean", including_absence)
ar<-.jarray(map(r,function(x) .jnew('java.lang.String',toString(x))),contents.class = "java/lang/String" )
.jcall(cs,"V","initialData",i,t,ia)
Integer <- J("java.lang.Integer")
topk<-.jnew("java/lang/Integer", as.integer(top_k))
cor<-.jnew("java.lang.String", correlation_type)
Double<- J("java.lang.Double")
cont<-Double$parseDouble(continuity_correction)
thresh<-Double$parseDouble(correlation_threshold)
singleK<-.jnew("java.lang.Boolean",singleton)
.jcall(cs,"Ljava/lang/String;", 'ShowMFCI', ar,topk,cor,cont,thresh,singleK)
}
writeLines(get_mfci("transactions.txt","items.txt",FALSE,10,"BCPNN","0.5","0.0",FALSE),"output.txt")
get_pairs<-function(transaction_list_filepath,items_list_filepath,itemset,including_absence,top_k,correlation_type,
continuity_correction,correlation_threshold,detail)
{
.jinit(".")
.jaddClassPath("MFCI.jar")
cs<- .jnew("processing.CorrelationSearch")
t<-.jnew("java.lang.String", transaction_list_filepath)
i<-.jnew("java.lang.String", items_list_filepath)
ia<-.jnew("java.lang.Boolean", including_absence)
.jcall(cs,"V","initialData",i,t,ia)
search_type<-.jnew("java.lang.String","Token-ring Search")
use_detail<-.jnew("java.lang.Boolean", detail)
Integer <- J("java.lang.Integer")
topk<-as.integer(top_k)
cor<-.jnew("java.lang.String", correlation_type)
Double<- J("java.lang.Double")
cont<-Double$parseDouble(continuity_correction)
thresh<-Double$parseDouble(correlation_threshold)
itemset_ar<-.jarray(map(unlist(strsplit(itemset,",")),function(x) .jnew('java.lang.String',toString(x))),contents.class = "java/lang/String")
print(unlist(strsplit(itemset,",")))
print(itemset)
.jcall(cs,'S','getTopKPairInformation',itemset_ar,topk,search_type,cor,cont,thresh,use_detail)
}
install.packages('rJava')
install.packages('purrr')
library(purrr)
library(rJava)
get_mfci<-function(transaction_list_filepath,items_list_filepath,including_absence,top_k,correlation_type,
continuity_correction,correlation_threshold,singleton){
.jinit(".")
.jaddClassPath("MFCI.jar")
cs<- .jnew("processing.CorrelationSearch")
t<-.jnew("java.lang.String", transaction_list_filepath)
i<-.jnew("java.lang.String", items_list_filepath)
pathname<-file(items_list_filepath,open="r");
n<- length(readLines(pathname));
closeAllConnections()
r<-seq(0,n-1)
ia<-.jnew("java.lang.Boolean", including_absence)
ar<-.jarray(map(r,function(x) .jnew('java.lang.String',toString(x))),contents.class = "java/lang/String" )
.jcall(cs,"V","initialData",i,t,ia)
Integer <- J("java.lang.Integer")
topk<-.jnew("java/lang/Integer", as.integer(top_k))
cor<-.jnew("java.lang.String", correlation_type)
Double<- J("java.lang.Double")
cont<-Double$parseDouble(continuity_correction)
thresh<-Double$parseDouble(correlation_threshold)
singleK<-.jnew("java.lang.Boolean",singleton)
.jcall(cs,"Ljava/lang/String;", 'ShowMFCI', ar,topk,cor,cont,thresh,singleK)
}
writeLines(get_mfci("transactions.txt","items.txt",FALSE,10,"BCPNN","0.5","0.0",FALSE),"output.txt")
install.packages('purrr')
library(purrr)
install.packages('stats')
install.packages("mfciTool")
library(devtools)
install.packages(devtools
)
install.packages("devtools")
library(devtools)
install_github(patloz/mfci)
install_github(PatLoz/mfci)
install_github('PatLoz/mfci')
install_github('PatLoz/MFCI')
install_github('patloz/mfci')
install_github('patloz/mfcitool')
library(mfciTool)
mfci()
mfci()
help(package="mfciTool")
library(mfciTool)
pairs()
pairs()
mfci()
install_github('patloz/mfcitool')
install_github('patloz/mfcitool')
library(devtools)
install_github('patloz/mfcitool')
library(devtools)
install_github('patloz/mfcitool')
install_github('patloz/mfcitools')
library(mfciTool)
pairs()
mfci()
install_github('patloz/mfcitools')
library(mfciTool)
library(devtools)
install_github('patloz/mfcitools')
library(mfciTool)
mfci()
getwd
getwd()
setwd("C:/Users/lozie/OneDrive/Desktop/MFCI_project-20210116T194823Z-001/MFCI_project/MFCI/mfciTool/mfciTool")
mfci()
